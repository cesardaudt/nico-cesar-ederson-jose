Nodos que não foram inseridos no codigo
-const_node
-for
-next
-quote
-str_lit
-string


Foi feito um replace no makemakemake para usar diretamente a create_node(), o arquivo nico.y.backup tem a mesma versao, com o makemakemake;

Foi realizada uma modificação geral no arquivo nico.y. Agora a árvore cria um nodo para cada terminal e só não cria nodos em não-terminais que possuem apenas um nodo filho, conforme a especificação;

A função decompile foi modificada para trabalhar com a nova estrutura da árvore;



---------------------

void print_inst_tac(FILE* out, struct tac i){
	
	if(strcmp(i.op,"PRINT") != 0){ //Se o operador não for PRINT
		if(strcmp(i.op,"\0") == 0){ //Se não houver segundo argumento
			fprintf(out, "%s := %s\n", i.res, i.arg1); //A operacao e atribuicao X := Y
		}
		else {
    		fprintf(out, "%s := %s %s %s\n", i.res, i.arg1, i.op, i.arg2); //A operacao e uma operacao X := Y OP Z		
		}
	}
	else{
		fprintf(out, "%s %s\n", i.op, i.arg1); //E uma instrucao print PRINT X
	}
}

/** \brief Imprime no arquivo apontado por 'out' o conteudo da lista apontada
 * por 'code'.
 *
 * @param out um ponteiro sobre um arquivo (aberto) aonde ira ser escrita a lista (uma linha por elemento).
 * @param code o ponteiro para a lista a ser impressa.
 *
 * Obs.: cada linha impressa no arquivo deve comecar por um numero inteiro
 * (3 digitos) seguido de ':'. O numero deve ser o numero da linha.
 * Exemplo:
 *   001:  instrucao_qualquer
 *   002:  outra_instrucao
 *    .....
 *   999:  ultima_instrucao
 *   000:  agora_tem_instrucao_demais
 */
void print_tac(FILE* out, struct node_tac * code){
	fputs("espaco_variaveis", out); //ao definir o nome da variavel que vai armazenar o tamanho ocupado por declaracoes, substituir a string pela variavel
	fputs("\n", out);
	fputs("espaco_temporarias", out); //ao definir o nome da variavel que vai armazenar o tamanho ocupado pelos temporarios, substituir a string pela variavel
	fputs("\n", out);

	struct node_tac * tac_pointer;
	tac_pointer = code;
	while(tac_pointer){
		fprintf(out, "%03d:   ", tac_pointer->number-1);
		print_inst_tac(out,*(tac_pointer->inst));
		tac_pointer=tac_pointer->next;
	}

}
